maayanshani,rotem.garti
319111886,207869520

## Answers to Questions
1. the connections between the class -
- AsciiArtAlgorithm -
A class in the ascii_art package responsible for running the AsciiArt art algorithm.
Utilizes composition with classes from the image package and the image_char_matching package.

- Shell -
The main class who runs the program.
Handle the user input, executes the AsciiArtAlgo using composition, and manage the output.

- Memento -
An inner class of Shell.
Responsible for saving the last BrightnessMatrix to avoid "expensive" recalculating when not needed.
Using composition with the BrightnessMatrix class.

- BrightnessMatrix -
Responsible for creating a matrix of double values that represent the brightness levels of
the pixels in the asciiArt image in the requested resolution.

- Image -
Represent an image as a matrix of Colors.
Handles operations and features related to this matrix.

- ImageProcessor -
A utility class for processing images.
Includes functionalities like padding the image with white pixels and other operations.

- SubImgCharMatcher -
A utility class responsible for mapping characters to brightness values.

2. Collections:
- AsciiArtAlgorithm  - ArrayList (BrightnessMatrices) - we used this data structure because we needed a
structure with efficient "add" and "get", while we only needed the last object in the array - in this case
both actions available in O(1).

- SubImgMatcher - Hashtable(Map) 1 - We used this data structure to store the unnormalized brightness values
of characters because it allows O(1) lookup for checking if a key exists. This efficiency is crucial for
matching brightness values to characters during ASCII art generation.

- SubImgMatcher - Hashtable(Map) 2 - This data structure was chosen to store normalized brightness values of
the characters. When the minValue or maxValue changes, we clear and rebuild the map. Given that this task is
limited to ASCII characters (a maximum of 95 keys), retrieval is O(1), which is optimal for this use case.
If the scale were to increase and involve significantly more characters, using a SortedSet could have been
advantageous. A SortedSet allows binary search operations in O(log n), which could be beneficial for quick
range queries. However, it comes with the tradeoff of O(log n) insertion time compared to the constant-time
insertion of a Hashtable.
In our scenario, simplicity and practicality were key considerations. Implementing a SortedSet proved to be
more complex, and since the current task involves only a small number of characters, the O(1) performance of
the Hashtable aligns well with the task requirements. Additionally, the straightforward implementation of a
Hashtable made it a clear choice for this task.

- shell - sortedSet - We used this data structure because it naturally maintains elements in sorted order,
making it ideal for adding characters and printing them directly in ascending order. Its simplicity and
efficient insertion and retrieval align well with the small dataset of ASCII characters,

3. Exceptions -
- User input errors:
We create InputExceptions who inheritance RunTimeExceptions and get a message parameter.
When the input was invalid we threw this exceptions and catch them in the "run" methods, where we printed the
relevant message and return back to getting an input from the user.
We also added ImageProcessor and SubImgCharMatcher exceptions, which are only relevant to the programmer
and help finding the problem at the first place possible. We threw those exceptions on the relevant places
and catch them in the "run" method, and exit the program there, making sure that wrong
actions aren't being made.

4. SubImgCharMatcher API changes: -
We added the setRoundMethod method to the SubImgCharMatcher API (public) to allow users to control the
rounding behavior during brightness calculations for ASCII art generation. This method enables dynamic
adjustments between rounding modes (ABS, UP, or DOWN), providing greater flexibility and adaptability.
Specifically, in this exercise, it was required for the run method in Shell, further justifying its inclusion
as a public function. This change enhances the usability and extensibility of the API for various scenarios.

5. API changes in the supplied files:
 we didn't change them